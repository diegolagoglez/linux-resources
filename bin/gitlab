#!/bin/bash

gitlab_user=git
gitlab_environment=production
gitlab_path=/home/$gitlab_user/gitlab

verbose=

function error {
	echo "ERROR: $1" 2>&1
	exit $2		# FIX: Check if arg 2 is defined and don't exit if not.
}

function log {
	if [ "$verbose" != "" ]; then
		echo $@
	fi
}

function usage {
	echo "gitlab - Command to check GitLab installation - Diego Lago <diego.lago.gonzalez@gmail.com>"
	echo "Usage: gitlab <command> [<options>]"
	echo "Commands:"
	echo "    backup : Do a GitLab backup."
	echo "     check : Check the GitLab server status."
	echo "      info : Show GitLab information."
	echo "     start : Start GitLab service."
	echo "      stop : Stop GitLab service."
	echo " dbmigrate : Migrate database (upon upgrade)."
	echo "     fetch : Fetch last GitLab version from repository."
	echo "    update <version>: Update GitLab to <version>."
	echo "   upgrade : Automatic upgrade GitLab."
	echo "   cleanup : Cleans up GitLab upon update."
	echo "      help : Shows this help."
	echo "Options:"
	echo "  -e <env> : Sets environment (production -default- or development)."
	echo "  -p <path>: Sets the path for GitLab installation (default to /home/git/gitlab)."
	echo "  -u <user>: Sets GitLab user (default to 'git')."
	echo "  -v       : Sets verbose mode."
}

function check_tool {
	for tool in $@; do
		type "$tool" >/dev/null 2>&1
		if [ $? != 0 ]; then
			error "Tool '$tool' in not installed in the system and is needed by GitLab." 6
		fi
	done
}

function check_user {
	id "$1" >/dev/null 2>&1
	if [ $? != 0 ]; then
		error "User does not exist: $1" 4
	fi
}

function check_path {
	if [ ! -d "$1" ]; then
		error "GitLab path not found: $1" 5
	fi
}

function check_action {
	if [ "$1" != "" ]; then
		error "Cannot specify more than one action." 2
	fi
}

function check_param {
	if [ "$2" == "" ]; then
		error "Option $1 must have an argument." 3
	fi
}

function backup_gitlab {
	log "Backing up GitLab database..."
	sudo -u $gitlab_user -H bundle exec rake gitlab:backup:create RAILS_ENV=$gitlab_environment
}

function check_gitlab {
	log "Checking GitLab..."
	sudo -u $gitlab_user -H bundle exec rake gitlab:check RAILS_ENV=$gitlab_environment
}

function gitlab_info {
	log "Gathering GitLab information..."
	sudo -u $gitlab_user -H bundle exec rake gitlab:env:info RAILS_ENV=$gitlab_environment
}

function gitlab_dbmigrate {
	log "Migrating database..."
	sudo -u $gitlab_user -H bundle exec rake db:migrate RAILS_ENV=$gitlab_environment
}

function gitlab_cleanup {
	log "Cleaning up..."
	sudo -u $gitlab_user -H bundle exec rake assets:clean assets:precompile cache:clear RAILS_ENV=$gitlab_environment
}

function gitlab_fetch {
	log "Getting last GitLab version..."
	cd $gitlab_path >/dev/null
	sudo -u $gitlab_user -H git fetch --all
}

function gitlab_update {
	error "GitLab update is not yet implemented." -1
}

function gitlab_upgrade {
	log "Automatically upgrading GitLab..."
	cd $gitlab_path >/dev/null
	sudo -u $gitlab_user -H ruby script/upgrade.rb $@
}

function do_gitlab_action {
	cd $gitlab_path >/dev/null
	case "$1" in
		backup)
			backup_gitlab
		;;
		check)
			check_gitlab
		;;
		info)
			gitlab_info
		;;
		start)
			log "Starting GitLab..."
			sudo service gitlab start
		;;
		stop)
			log "Stopping GitLab..."
			sudo service gitlab stop
		;;
		dbmigrate)
			gitlab_dbmigrate
		;;
		fetch)
			gitlab_fetch
		;;
		update)
			shift
			gitlab_update $@
		;;
		upgrade)
			shift
			gitlab_upgrade $@
		;;
		cleanup)
			gitlab_cleanup
		;;
		help)
			usage
		;;
	esac
	cd - >/dev/null
}

function main {

	if [ $# == 0 ]; then
		usage
		exit 0
	fi

	check_tool sudo ruby bundle service

	action=""
	while [ $# != 0 ]; do
		case "$1" in
			backup|check|help|info|start|stop|update|upgrade|dbmigrate|cleanup)
				check_action $action
				action=$1
				shift
			;;
			-e)
				check_param "$1" "$2"
				gitlab_environment="$2"
				shift 2
			;;
			-p)
				check_param "$1" "$2"
				gitlab_path="$2"
				shift 2
			;;
			-u)
				check_param "$1" "$2"
				gitlab_user="$2"
				shift 2
			;;
			-v)
				verbose=verbose
				shift
			;;
			*)
				error "Invalid option or command: $1" 1
			;;
		esac
	done

	check_user $gitlab_user
	check_path $gitlab_path

	do_gitlab_action $action
	
}

main $@
