#!/bin/bash

verbose=
message=

function usage() {
	echo "$(basename $0) v0.4 20180702 -- Utility to do a blocking console countdown."
	echo "GPLv3 -- Diego Lago Gonz√°lez <diego.lago.gonzalez@gmail.com>"
	echo "Usage: $(basename -- $0) [options]"
	echo "Options:"
	echo " -t <time>    Countdown this time (integer for seconds, HH:MM[:SS] format for other time)."
	echo " -u <time>    Countdown until this time (HH:MM[:SS] format)."
	echo " -r '<cmd>'   Run command (quoted) after countdown."
	echo " -m <msg>     Show <msg> before the countdown."
	echo " -v           Be verbose."
	echo " -h           Show this help and exit."
	exit 0
}

function verbose() {
	if [ ! -z "$verbose" ]; then
		echo $@
	fi
}

function countdown_to() {
	local OLD_IFS="${IFS}"
	IFS=":"
	local ARR
	local SECONDS
	if [[ $1 =~ ^-?[0-9]+$ ]]; then
		local SECONDS="$1"
	else
		ARR=( $1 )
		if [ ${#ARR[@]} -eq 2 ]; then
			SECONDS=$(( (ARR[0] * 60) + ARR[1] ))
		elif [ ${#ARR[@]} -eq 3 ]; then
			SECONDS=$(( (ARR[0] * 60 * 60) + (ARR[1] * 60) + ARR[2] ))
		else
			echo "ERROR: Invalid time format: $1" >&2
			exit 1
		fi
	fi
	local START=$(date +%s)
	local END=$((START + SECONDS))
	local CUR="$START"

	[ -n "${ARR[0]}" ] || ARR[0]="00"
	[ -n "${ARR[1]}" ] || ARR[1]="00"
	[ -n "${ARR[2]}" ] || ARR[2]="00"
	verbose "Countdown for ${ARR[0]} hours, ${ARR[1]} minutes and ${ARR[2]} seconds ($SECONDS seconds)."

	while [[ $CUR -lt $END ]]; do
		CUR=$(date +%s)
		LEFT=$((END-CUR))

		if [ -z "$message" ]; then
			printf "\r%02d:%02d:%02d" $((LEFT/3600)) $(( (LEFT/60)%60)) $((LEFT%60))
		else
			printf "\r%s %02d:%02d:%02d" "$message" $((LEFT/3600)) $(( (LEFT/60)%60)) $((LEFT%60))
		fi

		sleep 1
	done
	IFS="${OLD_IFS}"
	echo
}

function countdown_until() {
	local until_time=$(date +%s -d $1 2>/dev/null)

	if [ $? -ne 0 ]; then
		echo "ERROR: Invalid date: $1"
		exit 4
	fi

	verbose "Countdown until $(date +%H:%M:%S -d $1)"

	while [ $(date +%s) -lt $until_time ]; do
		LEFT=$(($until_time - $(date +%s) ))
		if [ -z "$message" ]; then
			printf "\r%02d:%02d:%02d" $((LEFT/3600)) $(( (LEFT/60)%60)) $((LEFT%60))
		else
			printf "\r%s %02d:%02d:%02d" "$message" $((LEFT/3600)) $(( (LEFT/60)%60)) $((LEFT%60))
		fi
		sleep 1
	done
}

function main() {
	if [ $# -eq 0 ]; then
		usage
	fi

	local action
	local param
	local run

	while getopts ":m:t:u:r:vh" opt; do
		case "$opt" in
			t)
				[ "$action" != "" ] && echo "ERROR: Cannot specify -t and -u together." && exit 5
				action="countdown_to"
				param=$OPTARG
			;;
			u)
				[ "$action" != "" ] && echo "ERROR: Cannot specify -u and -t together." && exit 5
				action="countdown_until"
				param=$OPTARG
			;;
			m)
				message="$OPTARG"
			;;
			h)
				usage
			;;
			r)
				run="$OPTARG"
			;;
			v)
				verbose=yes
			;;
			\?)
				echo "ERROR: Invalid option: -$OPTARG" >&2
				exit 1
			;;
			:)
				echo "ERROR: Option -$OPTARG requires an argument." >&2
				exit 2
			;;
		esac
	done

	shift $(( OPTIND - 1 ))

	if [ -z "$action" ]; then
		echo "ERROR: Invalid arguments. Use -h to show help." >&2
		exit 1
	fi

	if [ ! -z "$verbose" -a ! -z "$run" ]; then
		verbose "Run '$run' after countdown."
	fi

	$action $param

	if [ ! -z "$run" ]; then
		$run
	fi
}

main "$@"
