#!/bin/bash

# BASH colors and prompt.
# Documentation: https://wiki.archlinux.org/index.php/Color_Bash_Prompt

# Regular colors
black='\[\033[0;30m\]'
red='\[\033[0;31m\]'
green='\[\033[0;32m\]'
yellow='\[\033[0;33m\]'
blue='\[\033[0;34m\]'
purple='\[\033[0;35m\]'
cyan='\[\033[0;36m\]'
white='\[\033[0;37m\]'

# Bold colors
b_black='\[\033[1;30m\]'
b_red='\[\033[1;31m\]'
b_green='\[\033[1;32m\]'
b_yellow='\[\033[1;33m\]'
b_blue='\[\033[1;34m\]'
b_purple='\[\033[1;35m\]'
b_cyan='\[\033[1;36m\]'
b_white='\[\033[1;37m\]'

# Underline colors
u_black='\[\033[4;30m\]'
u_red='\[\033[4;31m\]'
u_green='\[\033[4;32m\]'
u_yellow='\[\033[4;33m\]'
u_blue='\[\033[4;34m\]'
u_purple='\[\033[4;35m\]'
u_cyan='\[\033[4;36m\]'
u_white='\[\033[4;37m\]'

# Background colors
bg_black='\[\033[40m\]'
bg_red='\[\033[41m\]'
bg_green='\[\033[42m\]'
bg_yellow='\[\033[43m\]'
bg_blue='\[\033[44m\]'
bg_purple='\[\033[45m\]'
bg_cyan='\[\033[46m\]'
bg_white='\[\033[47m\]'

# High Intensity
i_black='\[\033[0;90m\]'
i_red='\[\033[0;91m\]'
i_green='\[\033[0;92m\]'
i_yellow='\[\033[0;93m\]'
i_blue='\[\033[0;94m\]'
i_purple='\[\033[0;95m\]'
i_cyan='\[\033[0;96m\]'
i_white='\[\033[0;97m\]'

# Bold High Intensity
bi_black='\[\033[1;90m\]'
bi_red='\[\033[1;91m\]'
bi_green='\[\033[1;92m\]'
bi_yellow='\[\033[1;93m\]'
bi_blue='\[\033[1;94m\]'
bi_purple='\[\033[1;95m\]'
bi_cyan='\[\033[1;96m\]'
bi_white='\[\033[1;97m\]'

# Underline and high intensity colors
ui_black='\[\033[4;90m\]'
ui_red='\[\033[4;91m\]'
ui_green='\[\033[4;92m\]'
ui_yellow='\[\033[4;93m\]'
ui_blue='\[\033[4;94m\]'
ui_purple='\[\033[4;95m\]'
ui_cyan='\[\033[4;96m\]'
ui_white='\[\033[4;97m\]'

# High Intensity backgrounds
bgi_black='\[\033[0;100m\]'
bgi_red='\[\033[0;101m\]'
bgi_green='\[\033[0;102m\]'
bgi_yellow='\[\033[0;103m\]'
bgi_blue='\[\033[0;104m\]'
bgi_purple='\[\033[0;105m\]'
bgi_cyan='\[\033[0;106m\]'
bgi_white='\[\033[0;107m\]'

reset='\[\033[0m\]'

# This function changes user color depending on which user
# you are (red if you are root, blue in any other case).
function user_color() {
	if [ $(id -u) == 0 ]; then
		echo $i_white$bg_red
	else
		echo $i_blue
	fi
}

# This function changes host color depeding on which server you are.
function host_color() {
	if [ -n "$I_AM_AT_CONSOLE" ]; then
		echo $i_green
	else
		echo $bi_red
	fi
}

# Depending on a environment variable, this function adds
# a return or not. Put it in the place you want of PS1.
function multiline_prompt() {
	echo -n ""
}

function jobs_info() {
	local rj=$(jobs -pr | wc -l)
	local sj=$(jobs -ps | wc -l)
	if [ $rj -ne 0 -o $sj -ne 0 ]; then
		# FIXME: Not work with colors; escape characteres are shown instead
		# of actual colors. Why? This works in git prompt but here not.
		if [ "$1" != "" ]; then
			printf "$1" $rj $sj
		else
			echo -en "[jobs:$rj|$sj] "
		fi
	fi
}

function is_under_screen() {
	test "$TERM" == "screen" -o ! -z "$TMUX"
}

# Prints terminal (TERM) if we are under screen or tmux utilities.
function prompt_under_screen() {
	if [ "$TERM" == "screen" ]; then
		if [[ ! -z "$TMUX" ]]; then
			# Under tmux, not screen.
			echo -n "[tmux:$(echo $TMUX_PANE | cut -c2-)] "
		else
			# Under screen.
			echo -n "[screen:$WINDOW] "
		fi
	fi
}

function construct_git_prompt() {
	if [ $(type -t __git_ps1) ]; then
		PS1+="\$(__git_ps1 '[git: $i_purple%s$white] ')"
	fi
}

function prompt_command() {
	# Allows check the return value of last command at last position in
	# prompt (after execution of some prompt functions).
	PROMPT_LAST_COMMAND_RESULT=$?
}

function export_prompt_ok_fail_chars {
	if [[ -z "$PROMPT_CHAR_OK" ]]; then
		is_under_screen && PROMPT_CHAR_OK='*' || PROMPT_CHAR_OK="•"
	fi

	if [[ -z "$PROMPT_CHAR_FAIL" ]]; then
		is_under_screen && PROMPT_CHAR_FAIL='!' || PROMPT_CHAR_FAIL="×"
	fi
}

function git_ps1_properties() {
	# Enable __git_ps1 to use a colored prompt (as of version 1.8.1; only valid
	# when __git_ps1 is used for PROMPT_COMMAND).
	export GIT_PS1_SHOWCOLORHINTS=true

	# Enable show dirty state of the current branch (* for unstaged; + for staged).
	export GIT_PS1_SHOWDIRTYSTATE=true

	# Enable show if something is stashed with a '$' sign next to the branch name.
	export GIT_PS1_SHOWSTASHSTATE=true

	# Enable show if there are some untracked files (with a '%' sign next to the
	# branch name).
#	export GIT_PS1_SHOWUNTRACKEDFILES=true

	# View on PS1 if your current branch is paired with upstream
	# (< for behind, > for ahead, = for no changes, <> for divergence).
	# See help for more info about formatting.
#	export GIT_PS1_SHOWUPSTREAM="auto"
}

# Export Ok and fail prompt characters (if not already set).
export_prompt_ok_fail_chars

# Set some git PS1 properties.
git_ps1_properties

PROMPT_COMMAND='prompt_command'

PS1=""	# Resets prompt.
PS1+="$(prompt_under_screen)"
PS1+="\$(jobs_info '[jobs:$green%s$reset|$red%s$reset] ')"
PS1+="${debian_chroot:+($debian_chroot)}"
PS1+="$(user_color)\u$i_yellow@$(host_color)\H$white "
PS1+="$i_cyan\w$white "

construct_git_prompt

PS1+="\$([ \$PROMPT_LAST_COMMAND_RESULT -eq 0 ] && echo '$i_green$PROMPT_CHAR_OK' || echo '$i_red$PROMPT_CHAR_FAIL')$reset \\$ $reset"

export PS1

# Better PS4 prompt to show debugging information.
PS4='> ${FUNCNAME[0]:+${FUNCNAME[0]}@}$(basename ${BASH_SOURCE}):${LINENO}: '

export PS4
