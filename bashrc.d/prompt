#!/bin/bash

black='\[\033[0;30m\]'
red='\[\033[0;31m\]'
green='\[\033[0;32m\]'
yellow='\[\033[0;33m\]'
blue='\[\033[0;34m\]'
magenta='\[\033[0;35m\]'
cyan='\[\033[0;36m\]'
white='\[\033[0;37m\]'

b_black='\[\033[1;30m\]'
b_red='\[\033[1;31m\]'
b_green='\[\033[1;32m\]'
b_yellow='\[\033[1;33m\]'
b_blue='\[\033[1;34m\]'
b_magenta='\[\033[1;35m\]'
b_cyan='\[\033[1;36m\]'
b_white='\[\033[1;37m\]'

bg_black='\[\033[40m\]'
bg_red='\[\033[41m\]'
bg_green='\[\033[42m\]'
bg_yellow='\[\033[43m\]'
bg_blue='\[\033[44m\]'
bg_magenta='\[\033[45m\]'
bg_cyan='\[\033[46m\]'
bg_white='\[\033[47m\]'

# This function changes user color depending on which user
# you are (red if you are root, blue in any other case).
function user_color() {
	if [ $(id -u) == 0 ]; then
		echo $red
	else
		echo $blue
	fi
}

# If you are in a git project, this shows the current branch.
# Do not forget to call this function with a backslash on PS1
# in order to update prompt on branch change.
# Additionaly, you can use __git_ps1() function with arguments.
function git_project() {
	branch=$(git branch 2>&1 | grep '*' | cut -c3-)
	if [ "$branch" != "" ]; then
		echo -n " [git: $branch] "
	fi
}

# Other method to get git current branch.
function git_branch() {
	branch=$(git symbolic-ref HEAD --short)
	if [ -n "$branch" ]; then
		echo -n " [git: $branch] "
	fi
}

# Depending on a environment variable, this function adds
# a return or not. Put it in the place you want of PS1.
function multiline_prompt() {
	echo -n ""
}

# Enable __git_ps1 to use a colored prompt.
export GIT_PS1_SHOWCOLORHINTS=true

#PS1="\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w:\$ "
if [ $(type -t __git_ps1) ]; then
	PS1="$(user_color)\u$b_green@$green\H$white:$cyan\w$white:\$(__git_ps1 ' [git: %s] ')\$ "
else
	PS1="$(user_color)\u$b_green@$green\H$white:$cyan\w$white:\$ "
fi

export PS1

